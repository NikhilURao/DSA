/*
 * Given an array of numbers find 2 elements in the array whose sum is equal to the given number.
 * 
 *  Solution
 *  1. Brute force approach O(n^2)
 *  2. Binary Search approach - O(nlogn) Sort the given array in non decreasing order. Keep 2 pointers i,j i=0 j=arr.len. Cal sum of the elements in the ith and jth index. Increment i if sum < given sum or decrement j if sum > given sum.
 *  3. Using approach O(n) using unordered set   
 */

package exercise;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

public class PairSum {
	
	public ArrayList<Integer> getPairS1(ArrayList<Integer> arr, int sum) {
		for (int i=0; i<arr.size(); i++) {
			for (int j=i+1; j<arr.size(); j++) {
				if(arr.get(i)+arr.get(j)==sum) {
					return new ArrayList<Integer>(Arrays.asList(arr.get(i),arr.get(j)));
				}
			}
		}
		return null;
	}
	
	public ArrayList<Integer> getPairS2(ArrayList<Integer> arr, int sum) {
		int i=0;
		int j=arr.size()-1;
		
		while(i<j) {
			if (arr.get(i)+arr.get(j) == sum)
				return new ArrayList<Integer>(Arrays.asList(arr.get(i),arr.get(j)));
			else if (arr.get(i)+arr.get(j) > sum)
				j--;
			else if (arr.get(i)+arr.get(j) < sum)
				i++;
		}
		return null;
	}
    public ArrayList<Integer> solve(int[] A, int B) {
        HashSet<Integer> set = new HashSet<>();
        
        for (int i=0; i<A.length; i++){
            if (!set.contains(B-A[i])){
                set.add(A[i]);
            }
            else {
            	return new ArrayList<Integer>(Arrays.asList(A[i], B-A[i]));
            }
        }
        
        return null;
    }

	public static void main(String[] args) {
		
		Integer [] array = {10,5,2,3,-6,9,11};
		
		int [] arr = {10,5,2,3,-5,9,11};
		// converting array to arraylist
		ArrayList<Integer> a = new ArrayList<Integer>(Arrays.asList(array));
		int sum =4;
		PairSum p = new PairSum();
		p.getPairS1(a, sum).forEach(s -> System.out.print(s+" "));
		System.out.println("");
		p.getPairS2(a, sum).forEach(s -> System.out.print(s+" "));
		System.out.println("");
		p.solve(arr, sum).forEach(s -> System.out.print(s+" "));
		
		
		
		/*
        ArrayList<String> arr = new ArrayList<String>(Arrays.asList("0:31:13","1:00:00","0:10:03","0:57:03","0:48:03","0:57:43","0:55:19","0:58:07","0:59:01","0:26:58","0:30:43","0:43:33","0:56:52","0:46:07","0:58:13","0:57:43","0:57:44","0:48:57","0:55:57","0:45:51","0:37:07","0:29:47","0:58:24","0:51:48","0:59:15","0:58:56","0:59:19","0:37:07","0:51:57","0:59:11","0:21:22","0:59:06","0:58:53","0:58:10","0:58:40","0:58:29","0:59:07","0:51:08","0:47:55","0:01:01","0:30:34","0:52:02","0:44:51","0:30:28","0:46:09","0:14:18","1:00:00","0:51:42","0:50:55","1:00:00","0:50:46","0:56:02","0:16:33","1:00:00","0:51:26","0:52:05","0:51:25","0:11:11","0:51:02","1:00:00","1:00:00","0:52:16","1:00:00","1:00:00","1:00:00","0:08:06","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:35:18","0:18:18","1:00:00","0:56:31","1:00:00","1:00:00","1:00:00","1:00:00","0:19:00","0:03:26","0:19:10","0:44:17","1:00:00","0:44:31","1:00:00","1:00:00","0:23:26","1:00:00","1:00:00","1:00:00","0:02:17","1:00:00","0:26:27","0:46:19","1:00:00","1:00:00","1:00:00","1:00:00","0:32:04","1:00:00","1:00:00","1:00:00","1:00:00","0:57:54","0:10:37","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:50:23","0:19:12","1:00:00","0:40:10","1:00:00","0:23:57","1:00:00","1:00:00","0:31:28","0:55:21","1:00:00","0:58:57","0:46:47","0:17:55","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:42:46","0:57:48","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:40:01","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:52:38","1:00:00","1:00:00","1:00:00","0:15:38","1:00:00","1:00:00","0:50:47","1:00:00","0:14:18","1:00:00","0:14:36","1:00:00","0:59:39","1:00:00","0:12:17","1:00:00","1:00:00","1:00:00","1:00:00","0:59:09","1:00:00","1:00:00","0:40:26","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:42:46","1:00:00","0:12:18","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:56:10","1:00:00","1:00:00","1:00:00","1:00:00","0:12:02","0:58:41","0:59:07","1:00:00","0:55:52","0:58:42","0:29:20","0:57:31","0:59:38","1:00:00","0:58:39","0:55:46","0:56:33","1:00:00","0:58:43","0:57:52","1:00:00","1:00:00","1:00:00","0:58:10","0:56:48","0:56:29","0:58:43","0:57:02","0:58:11","0:57:22","0:57:00","0:57:29","0:57:54","0:57:30","0:49:01","0:57:02","1:00:00","1:00:00","0:56:57","0:29:02","0:59:46","1:00:00","1:00:00","1:00:00","0:59:15","0:13:11","0:48:06","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:11:46","0:10:43","0:10:28","0:10:37","0:05:48","1:00:00","0:59:04","0:11:50","1:00:00","1:00:00","0:15:29","0:12:58","1:00:00","0:13:17","0:08:40","0:19:47","1:00:00","0:20:09","0:10:42","1:00:00","1:00:00","0:07:59","0:13:45","0:10:28","1:00:00","0:58:53","1:00:00","0:55:58","0:23:15","0:27:31","0:57:40","0:08:55","0:59:35","0:54:15","0:56:06","0:59:35","0:56:02","0:59:48","0:58:14","0:37:12","0:40:43","0:59:49","0:25:59","1:00:00","0:40:35","0:50:43","0:35:21","0:28:23","1:00:00","0:58:16","0:41:44","0:58:18","0:37:22","0:35:09","0:52:51","0:23:37","0:42:30","0:58:06","0:58:20","0:41:31","0:51:41","0:21:59","0:59:03","0:29:41","1:00:00","0:42:29","0:34:30","1:00:00","0:59:08","0:28:31","1:00:00","1:00:00","1:00:00","0:53:48","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:01:29","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:59:05","1:00:00","0:49:19","1:00:00","0:29:48","1:00:00","1:00:00","1:00:00","0:24:11","1:00:00","1:00:00","0:34:26","1:00:00","1:00:00","0:25:56","1:00:00","0:26:42","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:26:24","1:00:00","1:00:00","1:00:00","1:00:00","0:08:00","1:00:00","0:23:36","1:00:00","1:00:00","0:59:12","0:59:23","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:38:05","0:27:29","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:51:06","1:00:00","1:00:00","0:58:52","0:13:19","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:18:25","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:59:54","0:41:22","1:00:00","1:00:00","1:00:00","0:59:10","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:59:05","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:59:53","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:58:52","0:55:42","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","1:00:00","0:44:27","0:43:46","1:00:00","0:45:07","0:44:34","0:44:25","0:44:20","0:33:48","0:44:35","0:44:38","0:44:26","0:44:27","0:44:41","0:50:31","0:44:30","0:17:44","0:44:35","0:44:38","0:44:33"));
        float hours = 0;
        for (int i=0; i< arr.size(); i++) {
            hours = hours + Float.valueOf(arr.get(i).split(":")[0]) + 
            		Float.valueOf(arr.get(i).split(":")[1])/60 +
            		Float.valueOf(arr.get(i).split(":")[2])/3600;
            //hours = hours + Float.valueOf(arr.get(i).split(":")[1])/60;
            //hours = hours + Float.valueOf(arr.get(i).split(":")[2])/3600;
        }
        
        System.out.println(hours); */
	}

}
